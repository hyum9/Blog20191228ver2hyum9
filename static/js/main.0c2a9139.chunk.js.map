{"version":3,"sources":["routes/React/React.js","routes/Spring/Spring.js","routes/Spring/SpringFramework.js","routes/Home.js","serviceWorker.js","index.js","routes/index.js"],"names":["href","rel","to","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","Home","SpringIndex","ReactIndex","SpringFramework","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAGe,oBACX,6BACI,oDCFO,oBAGX,6BACI,0BAAMA,KAAK,gGAAgGC,IAAI,eAC/G,4CACA,gFAHJ,qDAKwB,6BALxB,8CAM2B,6BAN3B,0GAOgC,6BAC5B,kBAAC,IAAD,CAAMC,GAAG,2BAAT,mDAAgE,6BARpE,+BASsB,6BATtB,2DAUmC,6BAVnC,0CAW4B,6BAAK,6BAAK,6BAAK,6BAEvC,6BAbJ,sBAcuB,6BAdvB,8DAeuB,6BAfvB,0FAgB+B,6BAhB/B,gEAiByB,+BCpBd,oBACX,6BACI,gFACA,6BACA,gDAEA,6KAC+C,6BAD/C,ySCNO,oBACX,oGACsE,6BADtE,qB,MCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCKD,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAcC,IACpC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,UAAUC,UAAaE,IACzC,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,SAASC,UAAaG,IACxC,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,0BAA0BC,UAAWI,QDXnD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c2a9139.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>About React-Native</h1>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n\r\n\r\n    <div>\r\n        <link href=\"https://fonts.googleapis.com/css?family=Nanum+Myeongjo:400,700,800&display=swap&subset=korean\" rel=\"stylesheet\"/>\r\n        <h1>About Spring</h1>\r\n        <h3>Project01. 게시판 만들기</h3>\r\n\r\n        통합개발환경(IDE): Eclipse<br/>\r\n        플러그인: Spring-Tool-Suite<br/>\r\n        ->프로젝트 생성 시 프레임워크로 Spring 사용<br/>\r\n        <Link to=\"/spring/springframework\">SpringFrameWork을 쓰는 이유</Link><br/>\r\n        언어(language): Java<br/>\r\n        프레임워크(framework): Spring, Maven<br/>\r\n        웹 서버(web-server): Tomcat<br/><br/><br/><br/>\r\n\r\n        <hr/>\r\n        2019-12-30 ToDoList<br/>\r\n        1. Blog 화면 바뀌는 거 실행<br/>\r\n        2. Spring 으로 게시판 만들기 환경 설정 <br/>\r\n        3. Spring 으로 게시판 만들기 <br/>\r\n    </div>\r\n\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>SpringFramework를 쓰는 이유!</h1>\r\n        <hr/>\r\n        <h3>Spring Framework</h3>\r\n\r\n        <p>\r\n            Spring Framework는 포괄적인 프로그래밍과 구성 모델을 제공한다. <br/>\r\n            Spring Framework를 사용하면 어떠한 배치 플랫폼에서도 실행 할 수 있는 현대 자바 기반 기업 어플리케이션을 제작할 수 있다. \r\n        </p>\r\n        \r\n    </div>\r\n\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n      I am at home Now~ See if this working! This is only checked in yarn!<br/>\r\n      yarn run deploy!\r\n    </div>\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Routes from \"./routes\";\r\nimport './index.css'\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Routes/>, document.getElementById(\"root\"));\r\nserviceWorker.unregister();","import React from \"react\";\r\nimport { HashRouter, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nimport ReactIndex from \"./React/React\"; \r\nimport SpringIndex from \"./Spring/Spring\";\r\nimport SpringFramework from \"./Spring/SpringFramework\";\r\nimport Home from \"./Home\"; \r\n\r\n//Route exact path = URL을 지정해주는 것 \r\n//Component는 해당 URL과 연결되는 페이지를 나타내준다\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path=\"/\" component = { Home }/>\r\n            <Route exact path=\"/spring\" component= { SpringIndex }/>\r\n            <Route exact path=\"/react\" component= { ReactIndex }/>\r\n            <Route exact path=\"/spring/springframework\" component={SpringFramework}/>\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n"],"sourceRoot":""}