{"version":3,"sources":["routes/Page1.js","routes/Page2.js","App.js","serviceWorker.js","index.js","routes/index.js"],"names":["to","Title","id","Component","Navigation","href","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","Page1","Page2","document","getElementById"],"mappings":"4NAGe,oBACX,kCAEI,6BACA,kBAAC,IAAD,CAAMA,GAAI,UAAV,iBCJO,oBACX,kCAEI,6BACA,kBAAC,IAAD,CAAMA,GAAI,UAAV,iB,+CCFFC,E,iLAEF,OACE,yBAAKC,GAAG,SACN,yDACA,0C,GALYC,aAWdC,E,iLAEF,OACE,yBAAKF,GAAG,cACN,uBAAGG,KAAK,kDAAR,QADF,eAEE,kC,GALiBF,aAWPA,YCfEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,mBCFD,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASC,UAAWE,QDFlC,MAAWC,SAASC,eAAe,W","file":"static/js/main.b1f66023.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        Hi\r\n        <br />\r\n        <Link to =\"/page2\">Go to Page2</Link>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        Hi\r\n        <br />\r\n        <Link to =\"/page1\">Go to page1</Link>\r\n    </div>\r\n);","import React, { Component } from 'react';\n\n//리액트야 Subject 라는 이름의 태그를 나는 만들거야\n//property => props\n\nclass Title extends Component{\n  render(){\n    return(\n      <div id=\"Title\">\n        <h1>코딩 공간</h1>\n        <h5>HYUM9</h5>\n      </div>\n    );\n  }\n}\n\nclass Navigation extends Component{\n  render(){\n    return(\n      <div id=\"Navigation\">\n        <a href=\"https://hyum9.github.io/Blog20191228ver2hyum9/\">Home</a>&nbsp;&nbsp;&nbsp;\n        <hr/>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  render(){\n    return (\n      <div className =\"App\">\n        <Title></Title>\n        <Navigation></Navigation>\n        <div id=\"Body\">\n          2019-12-29 To Do <br/>\n          <ul>\n            <li>\"React로 블로그 만드는 방법 github server에 올려서 실행시켜 보기\"에 관한 설명서 블로그에 올리기</li>\n            <li>블로그에 Github Repository 주소 삽입</li>\n            <li>Spring Framework에 관한 조사</li>\n            <li>읽어야 할 책 목록</li>\n          </ul>\n        </div>\n      </div>\n    );\n  } \n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from \"./routes\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Routes/>, document.getElementById(\"root\"));\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n","import React from \"react\";\r\nimport { HashRouter, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nimport Page1 from \"./Page1\";\r\nimport Page2 from \"./Page2\";\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Page1}/>\r\n            <Route exact path=\"/Page2\" component={Page2}/>\r\n        </Switch>\r\n    </HashRouter>\r\n);"],"sourceRoot":""}