{"version":3,"sources":["routes/Theory/React/React.js","routes/Theory/Spring/Spring.js","routes/Theory/WebApplication/WebApplication.js","routes/Projects/React/React.js","routes/Projects/React/BoardProject.js","routes/Projects/Spring/Spring.js","routes/Projects/WebApplication/WebApplication.js","serviceWorker.js","index.js","routes/index.js"],"names":["to","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","TheoryReact","TheorySpring","TheoryWebApplication","ProjectsReact","ProjectsSpring","ProjectsWebApplication","ProjectsReactBoardProject","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAGe,oBACX,6BACI,sCACA,6CCHO,oBAEX,6BACI,sCACA,8CCJO,oBACX,6BACI,sCACA,sDCHO,oBACX,6BACI,wCACA,2CACA,kBAAC,IAAD,CAAMA,GAAG,gCAAT,wBCJO,oBACX,6BACI,qDACA,6CCHO,oBAEX,6BACI,wCACA,8CCJO,oBACX,6BACI,wCACA,sD,MCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCOD,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAcC,IAChD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,iBAAiBC,UAAcE,IACjD,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,yBAAyBC,UAAaG,IACxD,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,kBAAkBC,UAAaI,IACjD,kBAAC,IAAD,CAAON,OAAK,EAACC,KAAK,mBAAmBC,UAAaK,IAClD,kBAAC,IAAD,CAAOP,OAAK,EAACC,KAAK,2BAA2BC,UAAaM,IAC1D,kBAAC,IAAD,CAAOR,OAAK,EAACC,KAAK,+BAA+BC,UAAWO,QDhBxD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dcc99e5d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Theory</h1>\r\n        <h3>About React</h3>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n\r\n    <div>\r\n        <h1>Theory</h1>\r\n        <h3>About Spring</h3>\r\n    </div>\r\n\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Theory</h1>\r\n        <h3>About WebApplication</h3>\r\n\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Projects</h1>\r\n        <h3>About React</h3>\r\n        <Link to=\"/Projects/React/BoardProject\">Go to BoardProject</Link>\r\n\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Projects>BoardProject</h1>\r\n        <h3>About React</h3>\r\n        \r\n\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n\r\n    <div>\r\n        <h1>Projects</h1>\r\n        <h3>About Spring</h3>\r\n    </div>\r\n\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Projects</h1>\r\n        <h3>About WebApplication</h3>\r\n    </div>\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Routes from \"./routes\";\r\nimport './css/index.css'\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Routes/>, document.getElementById(\"root\"));\r\nserviceWorker.unregister();","import React from \"react\";\r\nimport { HashRouter, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nimport TheoryReact from \"./Theory/React/React\"; \r\nimport TheorySpring from \"./Theory/Spring/Spring\";\r\nimport TheoryWebApplication from \"./Theory/WebApplication/WebApplication\";\r\n\r\nimport ProjectsReact from \"./Projects/React/React\";\r\n\r\nimport ProjectsReactBoardProject from \"./Projects/React/BoardProject\";\r\nimport ProjectsSpring from \"./Projects/Spring/Spring\";\r\nimport ProjectsWebApplication from \"./Projects/WebApplication/WebApplication\";\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path=\"/Theory/React\" component = { TheoryReact }/>\r\n            <Route exact path=\"/Theory/Spring\" component = { TheorySpring }/>\r\n            <Route exact path=\"/Theory/WebApplication\" component = {TheoryWebApplication}/>\r\n            <Route exact path=\"/Projects/React\" component = {ProjectsReact}/>\r\n            <Route exact path=\"/Projects/Spring\" component = {ProjectsSpring}/>\r\n            <Route exact path=\"/Projects/WebApplication\" component = {ProjectsWebApplication}/>\r\n            <Route exact path=\"/Projects/React/BoardProject\" component={ProjectsReactBoardProject}/>\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n"],"sourceRoot":""}