{"version":3,"sources":["routes/Theory/React/React.js","routes/Theory/Spring/Spring.js","routes/Theory/WebApplication/WebApplication.js","routes/Projects/React/React.js","routes/Projects/React/BoardProject.js","routes/Projects/Spring/Spring.js","routes/Projects/WebApplication/WebApplication.js","routes/Diary/Diary.js","serviceWorker.js","index.js","routes/index.js"],"names":["to","id","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","TheoryReact","TheorySpring","TheoryWebApplication","ProjectsReact","ProjectsSpring","ProjectsWebApplication","ProjectsReactBoardProject","Diary","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAGe,oBACX,6BACI,sCACA,6CCHO,oBAEX,6BACI,sCACA,8CCJO,oBACX,6BACI,sCACA,sDCHO,oBACX,6BACI,wCACA,2CACA,kBAAC,IAAD,CAAMA,GAAG,gCAAT,wBCJO,oBACX,6BACI,qDACA,6CCHO,oBAEX,6BACI,wBAAIC,GAAG,SAAP,YACA,wBAAIA,GAAG,YAAP,gBAEA,wBAAIA,GAAG,WAAP,6CACA,uBAAGA,GAAG,WAAN,2HAC4C,6BAD5C,0DAEwB,6BAAK,6BAF7B,kBAImB,6BAJnB,iCAKkC,6BALlC,yDAMuD,6BANvD,yCAQ6B,6BAR7B,0BASwB,6BATxB,2CAU0C,6BAAK,6BAAK,6BAVpD,2BAa2B,6BAb3B,uFAc0C,6BAd1C,8FAesD,6BAftD,2IAgB2D,6BAhB3D,qHAiBoD,6BAjBpD,2GAkB+C,6BAlB/C,uLAmB+D,6BAnB/D,iMAoByE,6BApBzE,0PAqBsE,6BArBtE,mTAsBkF,6BAtBlF,4HAuBkC,6BAvBlC,iEAwByB,6BAxBzB,wGAyBuC,6BAzBvC,wBA0Bc,6BA1Bd,aA4BkB,6BA5BlB,yBA6B8B,6BA7B9B,wEAgC4C,gCCvCrC,oBACX,6BACI,wCACA,sDCHO,oBACX,6BAEI,uCACA,2BACI,qDACA,iDACA,4GACA,iDACA,qEACA,0DACA,mDACA,0DAGJ,6BACA,8CACA,2BACI,oCADJ,8DAEuB,6BAFvB,oEAG6B,6BAH7B,iFAIgC,6BAJhC,0FAKoC,6BALpC,oEAMkC,6BAC9B,wCAPJ,iFAQgC,6BARhC,0FASoC,6BATpC,qEAUmC,8BAGnC,6BACA,8CACA,2BACI,oCADJ,iFAEgC,6BAFhC,0FAGoC,6BAHpC,6DAIsB,6BAJtB,6EAKuB,6BACnB,wCANJ,iIAOwC,6BAPxC,4IAQyC,6BARzC,oEASkC,6BATlC,8EAUkC,6BAVlC,+DAWmB,6BAXnB,yDAYkB,6BAZlB,oBAaW,8BAGX,6BACA,8CACA,2BACI,oCADJ,oJAKI,wCALJ,qJ,MCzCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCWD,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAcC,IAChD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,iBAAiBC,UAAcE,IACjD,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,yBAAyBC,UAAaG,IACxD,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,kBAAkBC,UAAaI,IACjD,kBAAC,IAAD,CAAON,OAAK,EAACC,KAAK,mBAAmBC,UAAaK,IAClD,kBAAC,IAAD,CAAOP,OAAK,EAACC,KAAK,2BAA2BC,UAAaM,IAC1D,kBAAC,IAAD,CAAOR,OAAK,EAACC,KAAK,+BAA+BC,UAAWO,IAC5D,kBAAC,IAAD,CAAOT,OAAK,EAACC,KAAK,SAASC,UAAaQ,QDrBpC,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2cd59e5d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Theory</h1>\r\n        <h3>About React</h3>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n\r\n    <div>\r\n        <h1>Theory</h1>\r\n        <h3>About Spring</h3>\r\n    </div>\r\n\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Theory</h1>\r\n        <h3>About WebApplication</h3>\r\n\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Projects</h1>\r\n        <h3>About React</h3>\r\n        <Link to=\"/Projects/React/BoardProject\">Go to BoardProject</Link>\r\n\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Projects>BoardProject</h1>\r\n        <h3>About React</h3>\r\n        \r\n\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n\r\n    <div>\r\n        <h1 id=\"title\">Projects</h1>\r\n        <h3 id=\"subtitle\">About Spring</h3>\r\n\r\n        <h2 id=\"subject\">Spring FrameWork DI(Dependency Injection)</h2>\r\n        <p id=\"content\">\r\n            Spring Framework 가 해결하는 가장 큰 문제는 의존성이다. <br/>\r\n            Controller를 한 번 살펴보자<br/><br/>\r\n\r\n            @RestController<br/>\r\n            public class WelcomeController<br/>\r\n\t        private WelcomeService service = new WelcomeService();<br/>\r\n\t\r\n\t        @RequestMapping(“/welcome”);<br/>\r\n\t        public String welcome()<br/>\r\n\t\t        return service.retrieveWelcomeMessage();<br/><br/><br/>\r\n\t        \r\n\r\n                Controller와 Servlet<br/>\r\n                -Servlet 클래스로 만든 것이 Controller이다. <br/>\r\n                -Servlet클래스는 Tomcat(Servlet Container)이 관리한다. <br/>\r\n                -Servlet Container 설정 파일에는 Servlet에 대한 정보가 담겨져 있다. <br/>\r\n                -Servlet Container에는 Servlet에 대한 정보가 담겨져 있는데<br/>\r\n                예를 들면, Servlet이 어디에 있는지는 servlet-class로<br/>\r\n                어떤 url에 매핑 되는지에 대한 정보는 servlet-mapping>에 관한 정보가 담겨져 있다.<br/>\r\n                -Controller, 즉 Servlet이 사용자의 요청을 처리를 위해서는 Servlet 클래스 혼자 할 수 없다. <br/>\r\n                즉 다른 객체(Object)에 의존할 수밖에 없다. 혼자 할 수 있어도 코드가 굉장히 복잡해지고 어려워 진다. <br/>\r\n                -Controller가 의존하는 객체를 새로 만들고 하는 등의 시간과 객체의 관리는 자동으로 하는 것이 개발자에게는 매우 편리하다. <br/>\r\n                -개발자는 프로그램의 기능에만 집중할 수 있다.<br/>\r\n                -따라서 우리는 DI를 쓴다. <br/>\r\n                -Spring에서 DI는 두가지 방법으로 쓸 수 있다. <br/>\r\n                -하나는, <br/>\r\n                \r\n                @Autowired<br/>\r\n                private Banana banana;<br/>\r\n\r\n                -다른 하나는 \r\n                public String testApple(Apple apple)<br/> \r\n        </p>\r\n        \r\n    </div>\r\n\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n        <h1>Projects</h1>\r\n        <h3>About WebApplication</h3>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default () =>(\r\n    <div>\r\n\r\n        <h1>Routine</h1>\r\n        <p>\r\n            <h3>Not Done 확인</h3>\r\n            <h3>TODO 쓰기</h3>\r\n            <h3>어제 공부한 내용 블로그 쓰기</h3>\r\n            <h3>TODO 하기</h3>\r\n            <h3>C언어 코딩 1000줄</h3>\r\n            <h3>운동 1시간</h3>\r\n            <h3>책 한권</h3>\r\n            <h3>일기 쓰기</h3>\r\n        </p>\r\n\r\n        <hr/>\r\n        <h1>2020-01-02-THU</h1>\r\n        <p>\r\n            <h3>TODO</h3>       \r\n            1. React로 블로그 목차 정리<br/>         \r\n            2. Spring boot 기본 프로젝트 생성<br/>\r\n            3. Spring boot 타이머 기능 함수 만들기<br/>\r\n            3-1. Spring boot 자바 스크립트 빌드 및 실행<br/>\r\n            4. Spring 게시판 프로젝트(~chapter12)<br/>\r\n            <h3>NOT DONE</h3>\r\n            3. Spring boot 타이머 기능 함수 만들기<br/>\r\n            3-1. Spring boot 자바 스크립트 빌드 및 실행<br/>\r\n            4. Spring 게시판 프로젝트(~chapter12)><br/>\r\n        </p>\r\n\r\n        <hr/>\r\n        <h1>2020-01-03-FRI</h1>\r\n        <p>\r\n            <h3>TODO</h3>        \r\n            3. Spring boot 타이머 기능 함수 만들기<br/>\r\n            3-1. Spring boot 자바 스크립트 빌드 및 실행<br/>\r\n            6. Ajax 타이머 기능 만들기<br/>\r\n            7. 웹에서 실행 가능한 거 확인!<br/>           \r\n            <h3>NOT DONE</h3>\r\n            1. Spring 게시판 프로젝트(~환경설정) 정리해서 올리기()<br/>\r\n            2. Spring 게시판 프로젝트 기본으로 돌아가는 것 까지 확인!<br/>\r\n            4. Spring 게시판 프로젝트(~chapter12)<br/>\r\n            5. Spring, React 관련 문서 번역 해보기><br/>\r\n            6. C언어 공부 시작해보기<br/>\r\n            7. 블로그 조금 손 보기<br/>\r\n            8. db연결<br/>\r\n        </p>\r\n\r\n        <hr/>\r\n        <h1>2020-01-04-SAT</h1>\r\n        <p>\r\n            <h3>TODO</h3>       \r\n            1. Spring Framework DI 블로그 올리기\r\n            2. Spring Web Framework db 연결\r\n            2-1. db 연결하고 github link\r\n            <h3>NOT DONE</h3>\r\n            3. db 구상 및 짜기\r\n            4. Spring 게시판 프로젝트 (~chapter12) 블로그 올리기\r\n        </p>\r\n\r\n    </div>\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Routes from \"./routes\";\r\nimport './css/index.css'\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Routes/>, document.getElementById(\"root\"));\r\nserviceWorker.unregister();","import React from \"react\";\r\nimport { HashRouter, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nimport TheoryReact from \"./Theory/React/React\"; \r\nimport TheorySpring from \"./Theory/Spring/Spring\";\r\nimport TheoryWebApplication from \"./Theory/WebApplication/WebApplication\";\r\n\r\n//현재 위치 routes! \r\nimport ProjectsReact from \"./Projects/React/React\";\r\nimport ProjectsReactBoardProject from \"./Projects/React/BoardProject\";\r\nimport ProjectsSpring from \"./Projects/Spring/Spring\";\r\nimport ProjectsWebApplication from \"./Projects/WebApplication/WebApplication\";\r\n\r\nimport Diary from \"./Diary/Diary\";\r\n\r\n\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path=\"/Theory/React\" component = { TheoryReact }/>\r\n            <Route exact path=\"/Theory/Spring\" component = { TheorySpring }/>\r\n            <Route exact path=\"/Theory/WebApplication\" component = {TheoryWebApplication}/>\r\n            <Route exact path=\"/Projects/React\" component = {ProjectsReact}/>\r\n            <Route exact path=\"/Projects/Spring\" component = {ProjectsSpring}/>\r\n            <Route exact path=\"/Projects/WebApplication\" component = {ProjectsWebApplication}/>\r\n            <Route exact path=\"/Projects/React/BoardProject\" component={ProjectsReactBoardProject}/>\r\n            <Route exact path=\"/Diary\" component = {Diary}/>\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n"],"sourceRoot":""}